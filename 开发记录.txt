开发人员：malooei
起始时间：11:54 2014-5-20
预计耗时：三个月
版本控制系统：GIT
目标：神州III号开发板基础在rt-thread基础上整合硬件资源（不包括TCP/IP相关）
	
	
11:56 2014-5-20
搭建rt-thread系统调试环境，建立两个编辑版本：
1：mlrt_os_orig ：在纯净的rtos上开始整合。
2：mlrt_os_sz   ：LT400项目中的开发源码，用于为mlrt_os_orig的整合汲取思路。
3：查看《rtthread_1.2x系列编程指南》文档中关于finsh shell及文件系统的相关内容
   关键字：finsh  FAT YAFFS2 NANDFLASH
    
11:49 2014-5-29
1:查看文档<rtthread_1.2x系列编程指南>有关lwIP相关内容。

9:15 2014-5-31
1:查看文档<rtthread_1.2x系列编程指南>有关lwIP相关内容。
2:查看文档<rtthread_1.2x系列编程指南>线程管理和调度相关内容。

13:45 2014-6-3
1:关键字：线程优先级，线程抢占

13:59 2014-6-10
1:搭建纯净RTT调试环境
2:查找静态线程与动态线程区别概念
静态线程在编译时候分配空间，会占用RW/ZI空间，占用空间大，但是实时性好。
动态线程在程序运行时候动态分配空间，占用空间小，但是运行时间相对静态线程长，效率没有静态线程高。

9:07 2014-6-11
1:搭建RTT环境下finsh调试cmd_debug.c,用于系统命令调试。
2:在添加新的文件后，文件的内容没有编译，需在..\..\tools\building.py中修改添加所需编译的内容。
3:开始向rt-thread源码中整合w25x16 spi flash模块，阅读w25x16 datasheet

14:36 2014-6-12
1:w25x16 datasheet W25X16 将2M 的容量分为32个块（Block），每个块大小为 64K 字节，每个块又分
为16个扇区（Sector），每个扇区 4K 个字节。而每页是256个字节。也就是说每个扇区是16页


10:57 2014-6-16
1:整理w25x16 spi flash代码，开始调试。


13:46 2014-6-18
1:w25x16器件ID读出并且正确识别。


15:18 2014-6-20
SD卡一般支持两种操作模式1：SD卡模式 2：SPI模式
主机可以选择以上任意一种方式与SD卡进行通信，SD卡允许4线高速数据传输，SPI模式允许简单的SPI接口与SD卡进行通信
，这种模式与SD卡模式相比就是牺牲了速度。 


18:11 2014-6-24 
w25x在擦除情况写单页数据验证完成。接下来验证跨界及自动擦除写函数，spi flash 地址入口如何分配。


9:28 2014-6-26
1: TSC2046,ADS7846触摸屏控制器。
pin to pin其核心为具有采样和保持功能的12位逐次逼近式AD转换器。
现阶段常见触摸屏分为电阻，电容，表面声波，红外线扫描和矢量压力传感器等类型，其中使用最多的是四线或五线
电阻式触摸屏。
2:四线电阻触摸屏原理：
是由两个透明电阻膜构成，在它的水平和竖直方向电压网上施加电压，通过AD将触摸点位置信息转换为电压对应出的
坐标值。
3:TSC2046内部有2.5v参考电压 

4:查LCD_touch_screen_contorl tsc2406硬件信号线连接 ：
  pin11->PENIRQ->PG7  硬件正常的情况下，触碰触摸屏，在PENIRQ会有一个下降沿。


 
10:50 2014-6-30
1:查看TSC2046触摸屏控制器datasheet.
2:整理tsc2046 control byte内容：

	BIT7	BIT6	BIT5	BIT4	BIT3	BIT2	BIT1	BIT0
	(MSB)													(LSB)

	S		A2      A1      A0      MODE	SER/DFR	PD1		PD0	
	
	BIT7->S->Initiate START
	
	BIT6,5,4->Addressing->Channel Select bits.
	
	BIT3->MODE
	
	BIT2->SER/DFR

9:45 2014-7-8
1:查看BMP格式文件资料，Bit-Map, windows操作系统下标准图像文件格式
	
9:12 2014-7-10
1:编写TSC2046代码
	
18:14 2014-8-20
1:TSC2046测试成功，触点获取横向及纵向电压采样值
注意：今天获取到值为零，原因在于原理图中tsc2046参考电压接地，而tsc2046控制字中设置参考为外部参考导致（BIT2设置错误）。
	
11:11 2014-8-21
1:查阅IS16LV25616  SRAM资料，学习STM32 FSMC接口。	
FSMC->可变静态存储器控制器。
FSMC为cpu提供了一个适用于不同类型的外部存储器控制器的接口，相对于其他控制芯片是个优势。
FSMC管理1G的地址映射空间，该空间划分为4个256Mb的BANK,每个BANK又分为64Mb的子BANK。

FSMC->BANK1 的4 个子BANK 拥有独立的片选线和控制寄存器, 可分别扩展一个独立的存储设备BANK2~ BANK4 只有一组控制寄存器。
			
	Bank 1 used by the NOR Flash/SRAM controller to address up to 4 memory devices.
This bank is split into 4 regions with 4 dedicated Chip Select signals

9:35 2014-8-22	
外部存储器能够正常工作的关键在于：用户能否根据所选存储器的型号	，对配置寄存器进行合理的初始化配置。
配置正常顺序：
1：确定映射地址空间 		2：配置存储器基本特征		3：配置存储器时序参数	

IS16LV25616->SRAM->管脚说明：
1：地址及数据线：A0~A17->地址线，  IO1~IO15->数据输入输出线，		
2：控制线： /CE->chip enable input	/OE->output enable input	/WE->write enable input
		    /LB->lower byte control->IO0~7		/UB->upper byte control->IO8~15
			NC->no connection		
3：电源：	Vcc->power	GND->ground


9:56 2014-8-25
异步通信与同步通信：
异步通信是一种很常用的通信方式，发送端可以在任意时刻发送字符，因此必须在每一个字符的开始和结束地方加上标志，即
加上开始位和结束位，以便接收端能够正确的将每一个字符接收下来，另外，异步通信也可以以帧作为发送单位。

同步通信的通信双方必须先建立同步，即双方的时钟要调整到同一频率收发双方不停发送和接收连续的同步比特流，但这也
包括两种不同同步方式，一种是全网同步，用非常精确的主时钟对全网所有结点上的时钟进行同步；另一种是使用准同步，
各结点时钟之间允许有微小的误差，然后采用其他措施实现同步传输。

SRAM->staic RAM 具有静态存取功能的内存，不需要刷新电路即能保存它内部存储的数据
	速度非常快，在快速读取和刷新时能够保持数据完整性。


17:00 2014-8-27
查看视频采集相关内容，SCCB 是OmniVision 公司定制的串行摄像头控制总线(Serial Camera Control Bus)，它用于对
摄像头的寄存器进行读写,以达到对摄像头输出图像的控制。 


10:23 2014-8-28
新建fsmc_sram_api.c,fsmc_sram_hw.c，fsmc_sram_api.h及fsmc_sram_hw.h文件，各个类型的sram型号区分包含在这些
文件中。
  

9:06 2014-9-1
SRAM在写入数据是不需要擦除，这是与flash不同的地方之一。
w25x16在写数据之前需要先擦除相关地址，保证所写空间内的数据为1，flash只能从1将数据写为0，不能将数据从0写为1。


13:22 2014-9-5
SRAM -> IS61LV25616调通，开始研究NORFLASH的读写

在完成 NorFlash NandFlash Sram 操作后，需要总结三种类型的闪存在FSMC接口应用的异同。 


9:29 2014-9-9
NorFlash与NandFlash都称为Flash,所以在写入数据之前都需要先保证数据空间为0，这点与spi flash相同。 

NorFlash有易失性，掉电不保存数据，随机存储速度比NandFlash快的多，所以一般用NorFlash做内存片，或者叫做数据缓冲
而NandFlash则一般用来做存储数据用，比如：U盘，MP3等。


17:45 2014/9/22
做与宗澎交接工作准备，查看《RT-Tread》TCP/IP协议栈相关内容：
LwIP 是瑞士计算机科学院（Swedish Institute of Computer Science）的Adam Dunkels等开发的
一套用于嵌入式系统的开放源代码TCP/IP协议栈，它在包含完整的TCP协议实现基础上实现了小
型的资源占用，因此它十分适合于使用到嵌入式设备中，占用的体积大概在几十kB RAM和40KB
ROM代码左右。

  
9:24 2014/10/8
在RTT OS 下加入芯片内温度获取模块

9:24 2014/10/8
准备在RTT OS下加入内部RTC及片外温湿度传感器AM2301模块获取。

增加struct rtc_time_st time_member结构体用于存放RTC采集的时间参数，成员包括：
年月日时分秒

key words:rtc, bkp


10:18 2014/10/10
开锁小板上没有外界LSE 32.768khz 时钟，内部rtc测试推后，开始做外接数字温湿度传感器AM2301.
调试AM2301发现外设返回数据会将总线拉低，原因不明。

9:52 2014/10/11
昨天总线被拉低问题找到是器件手册上的时序有问题...电平上不去是因为主机拉低的原因...按照手册中提供的另一个时序问题解决。

am2301驱动成功，注意在获取温度，湿度和校验值后需要自校验进行数据甄别。

今天测试片内温度有点不正常。



21:42 2014/10/11
查看ENC28J60相关资料



10:51 2014/10/12  
继续TCPIP ENC28J60硬件相关资料阅读理解

以太网是应用最广泛的局域网，包括：
1:标准的以太网(10Mbit/s);
2:快速以太网（100Mbit/s）;
3:千兆以太网（1000Mbit/s）;
4:(10Gbit/s)以太网;

ENC28J60是一款SPI接口的以太网控制芯片来实现的10M以太网，SPI接口使得小型单片机也能具有网路连接功能，集成MAC和PHY无需其他外设，具有可编程过滤功能，可自动评价
接收或拒收多种信息包，减轻了主控单片机的处理负荷；内部继承可编程的8KB双端口SRAM缓冲器，操作灵活方便。不足之处为仅支持10BASET。  

他们都符合IEEE802.3协议，规定了包括物理层的连线，电信号和介质访问层协议的内容。它很大程度上取代了其他局域网标准，如令牌环，FDDI和ARCNET。

ENC28J60是（美国维芯科技公司）推出的独立以太网控制器。

STM32F103ZET6通过SPI接口发送命令，访问ENC28J60的寄存器或读写接收/发送缓冲区，完成相关操作。复位也可通过SPI接口由软件实现，软件复位不影响RESET引脚状态。

ENC28J60是嵌入式产品中应用极为普遍的SPI接口以太网控制器。他具有以下特性：
1:IEEE802.3兼容的以太网控制器
2:接收器和冲突抑制电路
3:支持一个带自动极性检测和校正的10BASE-T端口
4:支持全双工和半双工模式
5:可编程在发生冲突时自动重发
6:可编程和CRC生成
7:可编程自动拒绝错误数据包
8:最高速度可达10Mbit/s


ENC28J60的硬件设计需要注意以下：
1:复位电路时钟振荡器
ENC28J60需要一个25MHz的晶振。

2:振荡器启动定时器
ENC28J60内部有一个振荡器启动时钟，上电7500个时钟周期（300us）,OST期满后内部的PHY方能正常工作。

3:时钟输出引脚
	
4:变压器
5:终端和其他外部器件
6:输入输出电平等




9:55 2014/10/13
注意处理TCP和UDP是有差别的。

10 BASE-T:指10Mbps基带传输的双绞线（T）。 最大有效长度100m。

ENC28J60 由七个主要功能模块组成：
1. SPI 接口――充当主控制器和ENC28J60 之间通信通道。
2. 控制寄存器――用于控制和监视ENC28J60。
3. 双端口RAM缓冲器――用于接收和发送数据包。
4. 判优器――当DMA、发送和接收模块发出请求时对RAM 缓冲器的访问进行控制。
5. 总线接口――对通过SPI 接收的数据和命令进行解析。
6. MAC （Medium Access Control）模块――实现符合IEEE 802.3 标准的MAC 逻辑。
7. PHY（物理层）模块――对双绞线上的模拟数据进行编码和译码。

该器件还包括其他支持模块，诸如振荡器、片内稳压器、电平变换器（提供可以接受5V 电压的I/O 引脚）和系统控制逻辑。

ENC28J60 包含一个振荡器起振定时器（OscillatorStart-up Timer，OST）以确保在使用振荡器和集成PHY之前它们已经稳定。OST 经过7500 个OSC1 时钟周期（300 μs）。

要实现以太网接口，ENC28J60 需要外部连接1:1 脉冲变压器，变压器应具有2 kV 以上的电压隔离性能，以防止静电干扰。

ENC28J60 中所有的存储器都是以静态RAM 的方式实
现的。 ENC28J60 中有三种类型的存储器：
1. 控制寄存器
包含控制寄存器（ControlRegister，CR）。它们用于进行ENC28J60 的配置、控制和状态获取。可以通过SPI 接口直接读写这些控制寄存器。

2. 以太网缓冲器
以太网缓冲器包含供以太网控制器使用的发送和接收存储器。该缓冲器大小为8 KB，分成单独的接收和发送缓冲空间。
1->接收缓冲器：由一个硬件管理的循环FIFO 缓冲器构成。
2->8 KB 存储器内没有被设定为接收FIFO 缓冲器的空间，均可作为发送缓冲器。

3. PHY 寄存器
PHY 寄存器用于进行PHY 模块的配置、控制和状态获取。 不可以通过SPI 接口直接访问这些寄存器，只可通过MAC 中的MII （Media Independent Interface）访问这些寄存器。

PHY 寄存器提供PHY 模块的配置和控制功能，以及操作的状态信息。 所有PHY寄存器都为16 位宽。 共有32个PHY 地址单元，但只可使用其中的9 个。

与ETH、MAC 和MII 控制寄存器或缓冲器不同， PHY寄存器不能通过SPI 控制接口直接访问，而是通过一组带有MIIM （Media Independent Interface forManagement）的特殊MAC 
控制寄存器来访问的

ENC28J60内部寄存器：
ECOCON： 时钟输出控制寄存器
PHLCON：PHY 模块LED控制寄存器（可设置LED工作极性 ）
PHSTAT：物理层状态寄存器

表3-1： ENC28J60 控制寄存器映射，通常被分为ETH、MAC 和MII
表3-3： ENC28J60 PHY 寄存器汇总
表4-1： ENC28J60 的SPI 指令集（七条指令集）
三组寄存器。“E”开头的寄存器属于ETH 组，“MA”开头的寄存器属于MAC 组，“MI”开头的寄存器属于MII 组。

ENC28J60 SPI（串行外设接口 Serial Peripheral Interface）通信： 输入数据上升沿采样，输出数据上升沿输出。


以太网概述（源自ENC28J60数据手册）：

符合IEEE 802.3 标准的以太网帧的长度一般介于64 字节与1518 字节之间。

MAC地址由两个部分组成。前三个字节称为组织惟一标识符（Organizationally Unique Identifier，OUI）。 OUI由IEEE 分配。后三个字节是由购买该OUI 的公司定义的地址字节。

它们由五个或六个不同的字段组成，这些字段分别是：目标MAC 地址、源MAC 地址、类型/ 长度字段 、数据有效负载、可选的填充字段和循环冗余校验（Cyclic Redundancy Check，CRC）字段。
1->目标地址：目标地址字段是一个六字节的字段，装有数据包发往的设备的MAC 地址。如果MAC 地址中第一个字节的最低有效位为1，则该地址是组播目标地址。
			 带有组播目标地址的数据包将被送达一组选定的以太网节点。 如果目标地址字段是保留的组播地址FF-FF-FFFF-FF-FF，则该数据包是广播数据包，它将被发送给共享该网络的每一个节点。
			 如果MAC 地址中第一个字节的最低有效位为0，则该地址是单播地址，数据包将仅供具有该地址的节点使用。
2->源地址  ：源地址字段是一个六字节的字段，装有创建该以太网数据包的节点的MAC 地址。ENC28J60 的用户必须为每个控制器生成一个惟一的MAC 地址。
			 
3->数据    ：数据字段的长度可在0 与1500 字节之间变化。超过这个范围的数据包是违反以太网标准的，它将被大多数以太网节点丢弃。			 
			 
4->填充    ：填充字段是一个长度可变的字段，当使用较小的数据有效负载时，添加该字段以满足IEEE 802.3 规范的要求。			 
			 当接收数据包时， ENC28J60 会自动拒绝小于18 字节的数据包。 18 字节或更大的数据包符合标准接收过滤条件，可被作为正常通信数据接受。
			 
5->CRC     ：CRC 字段是一个四字节字段，它包含一个行业标准的32 位CRC 值，该CRC 值是通过对目标、源、类型、数据和填充字段中的数据进行计算得出的。			 
				
				
另外，当通过以太网介质发送数据包时，一个7 字节的前导字段和一个字节的帧起始定界符将被附加到以太网数据包的开头。

ENC28J60 具有一个接收过滤器，它可以用来丢弃或接收具有组播、广播和/ 或单播目标地址的数据包。

图5-1： 以太网数据包格式
 


初始化设置：
1->接收缓冲器
2->发送缓冲器
3->接收过滤器
4->等待OST

MAC初始化设置：1;2;3;4;5;6;7;8;9;10

PHY初始化设置：

发送和接收数据包：
1->发送数据包：  ENC28J60 内的MAC 在发送时会自动生成前导符和帧起始定界符。 此外，MAC 可根据配置生成填充（如果需要）和CRC 字段。主控制器必须生成所有其他帧字段，并将它们写
				 入缓冲存储器，以待发送。此外，ENC28J60还要求在待发送的数据包前添加一个包控制字节。

2->接收数据包：

3->释放接收缓冲区空间；	
				 在主控制器处理完一个数据包（或部分数据包），并希望释放已处理数据占用的缓冲空间之后，主控制器就必须前移接收缓冲器读指针ERXRDPT。

4->接收缓冲器剩余空间；
				 在主控制器希望知道接收缓冲器剩余空间的大小时，它应读硬件写指针（ERXWRPT 寄存器） ，并将它与ERXRDPT 寄存器作比较。结合已知的接收缓冲器容量便可推算出剩余空
间的大小。



接收过滤器：
为了能最大限度地降低主控制器的处理工作量，ENC28J60 配备了一些不同的过滤器，能自动拒绝不需要的数据包。 
共使用了6 种不同的数据包过滤器：
1-> 单播
2-> 格式匹配
3-> Magic Packet?
4-> 哈希表
5-> 组播
6-> 广播

所有的过滤器都由ERXFCON 寄存器（寄存器8-1）进行配置。
寄存器8-1： ERXFCON：接收过滤器控制寄存器


单播过滤器：
单播接收过滤器检查所有传入数据包的目标地址。如果目标地址与MAADR 寄存器的内容完全匹配，则表示数据包符合单播过滤条件。

格式匹配过滤器：
格式匹配过滤器从传入数据包至多选择64 个字节，计算这些字节的IP 校验和。 然后将校验和与EPMCS 寄存器的内容作比较。 如果两者相匹配，则表示数据包符合格式匹配过滤条件。格式匹配过
滤器可用于过滤包内数据已知的数据包。

Magic Packet? 过滤器：
Magic Packet 过滤器检查所有传入数据包的目标地址和数据字段。

哈希表过滤器：
哈希表接收过滤器对数据包中的6 个目标地址字节进行CRC 校验。

组播过滤器：
组播接收过滤器检查所有传入数据包的目标地址。 如果目标地址第一个字节的最低有效位为1，则表示数据包符合组播过滤条件。

广播过滤器：
广播接收过滤器检查所有传入数据包的目标地址。 如果目标地址为FF-FF-FF-FF-FF-FF，则表示数据包符合广播过滤条件。


双工模式配置和协商：
ENC28J60 不支持双工模式自适应（auto-negotiation）。如果把ENC28J60连接到使能双工模式自适应的网络交换机或以太网控制器，则它将被检测为半双工器件。要在全双工模式下通信，必须将ENC28J60 
和远程结点（交换机、路由器或以太网控制器）手动地配置为全双工工作模式。
1->半双工工作方式
由于在全双工模式与半双工模式之间切换时可能导致这种不确定状态，因此主控制器在这期间不应发送任何数据包。

如果ENC28J60与另一个以太网控制器几乎同时开始发送，那么正在线上传输的数据将遭到破坏并且将产生冲突。

在半双工模式下，在某一时刻只能有一个以太网控制器通过物理介质发送数据。如果当另一个以太网控制器正在进行发送时，主控制器将ECON1.TXRTS 位置1，请求发送一个数据包，则ENC28J60 将产生延时
以等待远程发送停止。在远程发送停止后，ENC28J60 才尝试发送该数据包。

2->全双工工作方式
在全双工模式下，可以同时接收和发送数据包。 在这种情况下，当发送数据包时不会发生任何冲突。所以将不会使用一些配置字段，如MACLCON1 中的“最大重发次数”（RETMAX）和MACLCON2 中的“冲突窗口”
（COLWIN）。

在全双工模式下使能环回功能将禁止双绞线输出驱动器，并忽略所有输入数据，因此将断开所有连接（如果已建立）。 所有由于环回配置而接收到的数据包将经过所有使能的接收过滤器的筛选，这与常规
网络通信是一样的。



流量控制：
ENC28J60 实现了全双工和半双工通信模式下的硬件流量控制。 该功能的工作原理与使用的模式有关。
1->半双工模式：在半双工模式下，将EFLOCON.FCEN0 位置1 使能流量控制。
			   
			   由交替的1 和0 组成的连续前导信号（55h）会被自动发送到以太网介质上。任何连接在以太网上的节点均可看到该信号，要么不发送任何数据，等待ENC28J60 发送完毕；要么尝试发送，
			   从而立即引发冲突。 由于这种情况下会频繁发生冲突，因此网络上的节点之间根本无法进行通信。

由于存在对网络潜在的不利影响和缺乏有效性，除非在经过测试的闭合网络中，否则建议不要使用半双工流量控制。
			   
2->全双工模式：在全双工模式（MACON3.FULDPX = 1）下，硬件流量控制是通过发送暂停控制帧（IEEE 802.3 规范定义）来实现的。



复位：
ENC28J60 器件有以下几种不同的复位方式：
1->上电复位（POR）
   一旦VDD 上升到某个门限值后，就会在片内产生上电复位脉冲。这使得VDD 上升到足够器件工作时，器件会以初始化状态启动。

2->系统复位
   ENC28J60 的系统复位可通过RESET 引脚或SPI 接口实现。
   
3->仅发送复位
   通过SPI 接口向ECON1 寄存器的TXRST 位写入1 可实现仅发送复位。

4->仅接收复位
   通过SPI 接口向ECON1 寄存器的RXRST 位写入1 可实现仅接收复位。

5->各种MAC 和PHY 子系统复位
   通过将PHCON1 寄存器中的PRST 位置1 可将PHY 模块复位。

   MAC 子系统一共有9 种复位方式。

   
   
   
中断:
ENC28J60 具有多个中断源和两个独立的中断输出引脚，可以在有事件发生时通知主控制器。主控制器在检测到中断引脚电平的下降沿时触发中断。

导致中断的原因可分为两类：控制事件（INT）和LAN唤醒（Wake-up on LAN，WOL）事件。



INT 中断允许位（INTIE）
INT 中断允许位（INTIE）是全局允许位，它允许下面的中断将INT 引脚驱动为低电平：
1->接收错误中断（RXERIF）
2->发送错误中断（TXERIF）
3->发送中断（TXIF）
4->连接改变中断（LINKIF）
5->DMA 中断（DMAIF）
6->接收数据包待处理中断（PKTIF）


内置自测试控制器
ENC28J60 拥有一个内置自测试（Built-in Self-Test，BIST）模块，该模块用于确认8KB 存储缓冲器中的每一位是否正常工作。


虽然该模块主要用于制造测试，但用户进行诊断时仍可使用它。 该控制器对缓冲存储器的所有单元执行写操作，并与普通以太网操作共享部分硬件。 因此，只有在复位时或释放了必需的硬件之后才可
以使用BIST。


9:06 2014/10/15
查阅《TCPIP详解卷一：协议》，为嵌入式设备连接网络做理论准备。


13:45 2014/10/21
赵哥在关口表中加入“命令行控制打印机制”，准备将此机制应用到本机调试机制中。


10:31 2014/10/29
开始将关口表项目中有关enc28j60的代码加入到home项目中，遇见问题，找不到#include <netif/ethernetif.h>，编译不过。


14:51 2014/11/18
查看enc28j60以太网控制器ECON1
REG:
bit7	bit6	bit5	bit4	bit3	bit2	bit1	bit0
TXRST	RXRST	DMAST	CSUMEN	TXRTS	RXEN	BSEL1	BSEL0

TXRST->发送逻辑复位位
RXRST->接收逻辑复位位
DMAST->DMA起始和忙碌位
CSUMEN->DMA校验和使能位
TXRTS->发送请求位
RXEN->接收使能位
BSEL1：BSEL0：->存储器选择位
11->SPI访问BANK3中的寄存器
10->SPI访问BANK2中的寄存器
01->SPI访问BANK1中的寄存器
00->SPI访问BANK0中的寄存器


11:29 2014/11/19
查看enc28j60的spi指令集

参见enc28j60数据手册:表4-1 enc28j60 spi指令集
读控制寄存器(RCR)       操作码 000(bit7~bit5)  参数 aaaaa(bit4~bit0)
读缓冲器(RBM)           操作码 001(bit7~bit5)  参数 11010(bit4~bit0)
写控制寄存器(WCR)       操作码 010(bit7~bit5)  参数 aaaaa(bit4~bit0)
写缓冲器(WBM)           操作码 011(bit7~bit5)  参数 11010(bit4~bit0)
位域置1(BFS)            操作码 100(bit7~bit5)  参数 aaaaa(bit4~bit0)
位域清0(BFC)            操作码 101(bit7~bit5)  参数 aaaaa(bit4~bit0)
系统命令(软件复位)(SC)  操作码 111(bit7~bit5)  参数 11111(bit4~bit0)

注：操作码和参数组成1个byte数据参数。


13:34 2014/11/20
enc28j60读写寄存器成功。


17:13 2014/11/21
PDA（Personal Digital Assistant），又称为掌上电脑

嵌入式技术三个阶段：单片机（SCM）,微控制器（MCU）,系统级芯片（SoC）

<GNU Make 使用手册>

Bootloader


8:53 2014/11/22
LDD, ULK,LKD

android底层：http://blog.sina.com.cn/s/blog_63e908970100v9ab.html
有条件的话，买本书更好，比如《《Android底层接口与驱动开发技术详解》》


17:09 2014/12/4
搭建codeblock环境，最新版本codeblock编译有问题，换成来版本则没问题，最后发现codeblocks-13.12-setup.1409637506没有自带编译器，codeblocks-12.11mingw-setup自带编译器
新版本环境搭建的编译器问题需解决。


9:50 2014/12/22
enc28j60 PHY 寄存器提供PHY 模块的配置和控制功能，以及操作的状态信息。 所有PHY寄存器都为16 位宽。 共有32个PHY 地址单元，但只可使用其中的9 个。


13:52 2014/12/30
阅读TL16C554异步通信芯片资料。


9:25 2014/12/31
阅读《利用TL16C554实现多路串口通信》文章


10:03 2015/3/2
在神州三号开发板上开始学习驱动TFT LCD的驱动芯片ILI9320控制器

FSMC提供了所有的LCD控制器的信号，包括数据，地址及控制线

X86指32bit机器，X64指64bit机器


14:43 2015/3/3
验证汉子中的区位码
区位码，机内码

1： 机内码=高位字节+低位字节
2： 高位字节=区码+20H+80H(或区码+A0H)
3： 低位字节=位码+20H+80H(或位码+A0H)


10:36 2015/3/9
SSD1289提供四种系统接口：
1：MPU Parallel 6800-series Interface
2：MPU Parallel 8080-series Interface
3：MPU 4-lines Serial Peripheral Interface
4：MPU 3-lines Serial Peripheral Interface


17:21 2015/4/15
阅读enc28j60以太网控制器数据手册：
以太网数据包格式中，

目标地址（DA）（6byte）包括组播，广播或单播地址
实现方式：
组播：MAC 地址中第一个字节的最低有效位为1，则该地址是组播目标地址，例如，01-00-00-00-F0-00 和33-45-67-89-AB-CD 是组播地址
广播：如果目标地址字段是保留的组播地址FF-FF-FFFF-FF-FF，则该数据包是广播数据包，它将被发送给共享该网络的每一个节点。
单播：如果MAC 地址中第一个字节的最低有效位为0，则该地址是单播地址，数据包将仅供具有该地址的节点使用。

源地址(6byte)：源地址字段是一个六字节的字段，装有创建该以太网数据包的节点的MAC 地址。
	
数据手册34页：
类型/长度（2byte）：
	

10:43 2015/4/28
使用FSMC完成对SSD1289液晶控制器的初始化，初始化配置过程中需要注意：
1：注意基地址的设置，RS=1时并不是从0x6c000001开始（切记，这地方调试了2礼拜）
/* RS <==> A0 <==>0x6c000002(NE4 RS=1)*/  
#define LCD_REG              (*((volatile unsigned short *) 0x6c000000)) /* RS = 0 */
#define LCD_RAM              (*((volatile unsigned short *) 0x6c000002)) /* RS = 1 */

2：对于不同NEx（x=1,2,3,4）基地址的其实位置不同。
3：注意开启AHB的FSMC总线时钟。


16:03 2015/5/5
联调触摸显示功能（SSD1289+TSC2046）时发现上电后触碰触摸屏没有坐标输出，最后发现加入	turnhigh_tsc2046_cs()后，触摸屏上电正常。

11:03 2015/5/21
着手解决TSC2046触摸坐标输出bug

13:41 2015/5/25
感觉是屏幕接触供电的问题，还需要验证，今天开始触摸手写功能，先进行校准屏幕功能。

10:11 2015/6/9
接着5/25号的进行


11:46 2015/7/17
搭建github远程版本库
github.com注册用户，用户名密码在《Git 权威指南》扉页

1客户机：申请ssh
2:终端github:挂接相应sshkey
注意：申请新的ssh之前需要清空....\cygwin\home\malooei\.ssh

搭建远程github仓库方法参见：https://help.github.com/articles/generating-ssh-keys/


11:17 2015/7/20
ubuntu下进入主目录使用组合键ctrl+h显示以.开头的隐藏文件夹，git在ubuntu下的ssh秘钥是以.ssh文件夹的形式存储




























